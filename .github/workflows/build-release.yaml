name: Build - Release

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  BUILD_VERSION: latest # Computed
  DOCKER_HUB_USER: defi

jobs:
  linux-x64:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v3

    - name: Populate environment
      run: GIT_VERSION=1 ./make.sh ci-export-vars

    - name: Build and package
      run: GIT_VERSION=1 DOCKERFILE="x86_64-pc-linux-gnu-clang" TARGET="x86_64-pc-linux-gnu" ./make.sh docker-release

    - name: Publish artifacts
      uses: actions/upload-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu
        path: ./build/defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu.tar.gz

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Push to Docker Hub
      run: |
        set -e; ver=${{ env.BUILD_VERSION }}
        for tag in $(echo $ver latest); do 
          docker tag defichain-x86_64-pc-linux-gnu:${ver} defi/defichain:${tag}
        done
        docker push defi/defichain:${ver}

  linux-aarch64:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v3

    - name: Populate environment
      run: GIT_VERSION=1 ./make.sh ci-export-vars
    
    - name: Build and package
      run: GIT_VERSION=1 TARGET="aarch64-linux-gnu" ./make.sh docker-release

    - name: Publish artifact - aarch64-linux-gnu
      uses: actions/upload-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-aarch64-linux-gnu
        path: ./build/defichain-${{ env.BUILD_VERSION }}-aarch64-linux-gnu.tar.gz

  linux-armhf:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v3

    - name: Populate environment
      run: GIT_VERSION=1 ./make.sh ci-export-vars

    - name: Build and package
      run: GIT_VERSION=1 TARGET="arm-linux-gnueabihf" ./make.sh docker-release

    - name: Publish artifact - arm-linux-gnueabihf
      uses: actions/upload-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-arm-linux-gnueabihf
        path: ./build/defichain-${{ env.BUILD_VERSION }}-arm-linux-gnueabihf.tar.gz

  win-x64:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v3

    - name: Populate environment
      run: GIT_VERSION=1 ./make.sh ci-export-vars

    - name: Build and package
      run: GIT_VERSION=1 TARGET="x86_64-w64-mingw32" ./make.sh docker-release

    - name: Publish artifact - x86_64-w64-mingw32
      uses: actions/upload-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-x86_64-w64-mingw32
        path: ./build/defichain-${{ env.BUILD_VERSION }}-x86_64-w64-mingw32.tar.gz

  osx-x64:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v3

    - name: Populate environment
      run: GIT_VERSION=1 ./make.sh ci-export-vars

    - name: Build and package
      run: GIT_VERSION=1 TARGET="x86_64-apple-darwin" ./make.sh docker-release

    - name: Publish artifact - x86_64-apple-darwin
      uses: actions/upload-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-x86_64-apple-darwin
        path: ./build/defichain-${{ env.BUILD_VERSION }}-x86_64-apple-darwin.tar.gz

  osx-aarch64:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v3

    - name: Populate environment
      run: GIT_VERSION=1 ./make.sh ci-export-vars

    - name: Build and package
      run: GIT_VERSION=1 TARGET="aarch64-apple-darwin" ./make.sh docker-release

    - name: Publish artifact - aarch64-apple-darwin
      uses: actions/upload-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-aarch64-apple-darwin
        path: ./build/defichain-${{ env.BUILD_VERSION }}-aarch64-apple-darwin.tar.gz

  multi-arch-docker-build:
    needs:
      - linux-x64
      - linux-aarch64
      - linux-armhf
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3

    - name: Populate environment
      run: GIT_VERSION=1 ./make.sh ci-export-vars

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v2

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build defi image (linux-x64)
      run: GIT_VERSION=1 TARGET="x86_64-pc-linux-gnu" ./make.sh docker-buildx

    - name: Build defi image (linux-aarch64)
      run: GIT_VERSION=1 TARGET="aarch64-linux-gnu" ./make.sh docker-buildx

    - name: Build defi image (linux-armhf)
      run: GIT_VERSION=1 TARGET="arm-linux-gnueabihf" ./make.sh docker-buildx

    # Create manifest list and publish multi-arch images
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Push multi-arch images to Docker Hub
      run: |
        set -e; ver=${{ env.BUILD_VERSION }}
        docker tag defichain-defi-x86_64-pc-linux-gnu:${ver} defi/defichain:${ver}-x64
        docker tag defichain-defi-aarch64-linux-gnu:${ver} defi/defichain:${ver}-arm64
        docker tag defichain-defi-arm-linux-gnueabihf:${ver} defi/defichain:${ver}-arm
        docker push defi/defichain:${ver}-x64
        docker push defi/defichain:${ver}-arm64
        docker push defi/defichain:${ver}-arm

    - name: Create and push manifest list to Docker Hub
      run: |
        set -e; ver=${{ env.BUILD_VERSION }}
        docker manifest create defi/defichain:${ver} defi/defichain:${ver}-x64 defi/defichain:${ver}-arm64 defi/defichain:${ver}-arm
        docker manifest annotate --arch amd64 defi/defichain:${ver} defi/defichain:${ver}-x64
        docker manifest annotate --arch arm64 defi/defichain:${ver} defi/defichain:${ver}-arm64
        docker manifest annotate --arch arm defi/defichain:${ver} defi/defichain:${ver}-arm
        docker manifest inspect defi/defichain:${ver}
        docker manifest push defi/defichain:${ver}

  create-release:
    needs:
      - linux-x64
      - linux-aarch64
      - linux-armhf
      - win-x64
      - osx-x64
      - osx-aarch64
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v3

    - name: Populate environment
      run: GIT_VERSION=1 ./make.sh ci-export-vars

    - name: Cleanup work dir
      run: rm -rf *

    - name: Get artifacts
      uses: actions/download-artifact@v3

    - name: zip package for win-x64
      run: |
        set -e; ver=${{ env.BUILD_VERSION }}
        cd defichain-${ver}-x86_64-w64-mingw32
        tar xzf defichain-${ver}-x86_64-w64-mingw32.tar.gz
        zip -r "defichain-${ver}-x86_64-w64-mingw32.zip" defichain-${ver}/

    - name: Get Release by Tag
      id: get_release_by_tag
      uses: jonfriesen/get-release-by-tag@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.BUILD_VERSION }}

    - name: Generate SHA256 checksum
      run: |
        set -e; ver=${{ env.BUILD_VERSION }}
        cd ./defichain-${ver}-x86_64-pc-linux-gnu
        sha256sum ./defichain-${ver}-x86_64-pc-linux-gnu.tar.gz > ./defichain-${ver}-x86_64-pc-linux-gnu.tar.gz.SHA256
        cd ./defichain-${ver}-aarch64-linux-gnu
        sha256sum ./defichain-${ver}-aarch64-linux-gnu.tar.gz > ./defichain-${ver}-aarch64-linux-gnu.tar.gz.SHA256
        cd ./defichain-${ver}-arm-linux-gnueabihf
        sha256sum ./defichain-${ver}-arm-linux-gnueabihf.tar.gz > ./defichain-${ver}-arm-linux-gnueabihf.tar.gz.SHA256
        cd .. && cd ./defichain-${ver}-x86_64-w64-mingw32
        sha256sum ./defichain-${ver}-x86_64-w64-mingw32.zip > ./defichain-${ver}-x86_64-w64-mingw32.zip.SHA256
        cd .. && cd ./defichain-${ver}-x86_64-apple-darwin
        sha256sum ./defichain-${ver}-x86_64-apple-darwin.tar.gz > ././defichain-${ver}-x86_64-apple-darwin.tar.gz.SHA256
        cd .. && cd ./defichain-${ver}-aarch64-apple-darwin
        sha256sum ./defichain-${ver}-aarch64-apple-darwin.tar.gz > ././defichain-${ver}-aarch64-apple-darwin.tar.gz.SHA256

    - name: Upload release asset - linux-x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu/defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu.tar.gz
        asset_name: defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu.tar.gz
        asset_content_type: application/gzip

    - name: Upload checksum - linux-x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu/defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu.tar.gz.SHA256
        asset_name: defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu.tar.gz.SHA256
        asset_content_type: text/plain

    - name: Upload release asset - linux-aarch64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-aarch64-linux-gnu/defichain-${{ env.BUILD_VERSION }}-aarch64-linux-gnu.tar.gz
        asset_name: defichain-${{ env.BUILD_VERSION }}-aarch64-linux-gnu.tar.gz
        asset_content_type: application/gzip

    - name: Upload checksum - linux-aarch64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-aarch64-linux-gnu/defichain-${{ env.BUILD_VERSION }}-aarch64-linux-gnu.tar.gz.SHA256
        asset_name: defichain-${{ env.BUILD_VERSION }}-aarch64-linux-gnu.tar.gz.SHA256
        asset_content_type: text/plain

    - name: Upload release asset - linux-armhf
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-arm-linux-gnueabihf/defichain-${{ env.BUILD_VERSION }}-arm-linux-gnueabihf.tar.gz
        asset_name: defichain-${{ env.BUILD_VERSION }}-arm-linux-gnueabihf.tar.gz
        asset_content_type: application/gzip

    - name: Upload checksum - linux-armhf
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-arm-linux-gnueabihf/defichain-${{ env.BUILD_VERSION }}-arm-linux-gnueabihf.tar.gz.SHA256
        asset_name: defichain-${{ env.BUILD_VERSION }}-arm-linux-gnueabihf.tar.gz.SHA256
        asset_content_type: text/plain

    - name: Upload release asset - win-x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-x86_64-w64-mingw32/defichain-${{ env.BUILD_VERSION }}-x86_64-w64-mingw32.zip
        asset_name: defichain-${{ env.BUILD_VERSION }}-x86_64-w64-mingw32.zip
        asset_content_type: application/zip

    - name: Upload checksum asset - win-x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-x86_64-w64-mingw32/defichain-${{ env.BUILD_VERSION }}-x86_64-w64-mingw32.zip.SHA256
        asset_name: defichain-${{ env.BUILD_VERSION }}-x86_64-w64-mingw32.zip.SHA256
        asset_content_type: text/plain

    - name: Upload release asset - osx-x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-x86_64-apple-darwin/defichain-${{ env.BUILD_VERSION }}-x86_64-apple-darwin.tar.gz
        asset_name: defichain-${{ env.BUILD_VERSION }}-x86_64-apple-darwin.tar.gz
        asset_content_type: application/gzip

    - name: Upload checksum asset - osx-x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-x86_64-apple-darwin/defichain-${{ env.BUILD_VERSION }}-x86_64-apple-darwin.tar.gz.SHA256
        asset_name: defichain-${{ env.BUILD_VERSION }}-x86_64-apple-darwin.tar.gz.SHA256
        asset_content_type: text/plain

    - name: Upload release asset - osx-aarch64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-aarch64-apple-darwin/defichain-${{ env.BUILD_VERSION }}-aarch64-apple-darwin.tar.gz
        asset_name: defichain-${{ env.BUILD_VERSION }}-aarch64-apple-darwin.tar.gz
        asset_content_type: application/gzip

    - name: Upload checksum asset - osx-aarch64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: ./defichain-${{ env.BUILD_VERSION }}-aarch64-apple-darwin/defichain-${{ env.BUILD_VERSION }}-aarch64-apple-darwin.tar.gz.SHA256
        asset_name: defichain-${{ env.BUILD_VERSION }}-aarch64-apple-darwin.tar.gz.SHA256
        asset_content_type: text/plain
